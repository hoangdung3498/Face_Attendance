using Microsoft.ML.OnnxRuntime.Tensors;
using Microsoft.ML.OnnxRuntime;
using SkiaSharp;
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Threading.Tasks;
using System.Linq;
using System.Net.Http;
using Newtonsoft.Json;

namespace InferencingSample
{
    public class Embedding
    {
        const string ModelInputName = "input0";
        const string ModelOutputName = "output0";
        byte[] _model;
        byte[] _sampleImage;
        SKImage _orgImage;
        List<string> _labels;
        InferenceSession _session;
        Task _initTask;

        // See asynchronous initialization pattern:
        // https://docs.microsoft.com/en-us/archive/msdn-magazine/2014/may/async-programming-patterns-for-asynchronous-mvvm-applications-services#the-asynchronous-initialization-pattern
        public Embedding()
        {
            _ = InitAsync();
        }

        public async Task<byte[]> GetSampleImageAsync()
        {
            await InitAsync().ConfigureAwait(false);
            return _sampleImage;
        }

        Task InitAsync()
        {
            if (_initTask == null || _initTask.IsFaulted)
                _initTask = InitTask();

            return _initTask;
        }

        async Task InitTask()
        {
            var assembly = GetType().Assembly;

            using var modelStream = assembly.GetManifestResourceStream($"{assembly.GetName().Name}.FaceFeature.onnx");
            using var modelMemoryStream = new MemoryStream();

            modelStream.CopyTo(modelMemoryStream);
            _model = modelMemoryStream.ToArray();

            _session = new InferenceSession(_model);

            using var sampleImageStream = assembly.GetManifestResourceStream($"{assembly.GetName().Name}.left_img_1.jpg");
            using var sampleImageMemoryStream = new MemoryStream();
            sampleImageStream.CopyTo(sampleImageMemoryStream);
            _sampleImage = sampleImageMemoryStream.ToArray();

        }


        float NormDirect(List<float> list)
        {
            float sumOfSquares = 0;
            foreach (float element in list)
            {
                sumOfSquares += element * element;
            }
            return (float)Math.Sqrt(sumOfSquares);
        }

        //float NormWithVector(List<float> list)
        //{
        //    Vector<float> vector = Vector<float>.Build.DenseOfEnumerable(list);
        //    return (float)vector.Norm(2);
        //}
        public async Task<List<float>> GetEmbAsync(SKBitmap sourceBitmap)
        {
            await InitAsync().ConfigureAwait(false);
            //using var sourceBitmap = SKBitmap.Decode(image);
            var pixels = sourceBitmap.Bytes;


            var bytesPerPixel = sourceBitmap.BytesPerPixel;
            var rowLength = 112 * bytesPerPixel;
            var channelLength = 112 * 112;
            var channelData = new float[channelLength * 3];
            var channelDataIndex = 0;

            for (int y = 0; y < 112; y++)
            {
                var rowOffset = y * rowLength;

                for (int x = 0, columnOffset = 0; x < 112; x++, columnOffset += bytesPerPixel)
                {
                    var pixelOffset = rowOffset + columnOffset;

                    var pixelR = pixels[pixelOffset];
                    var pixelG = pixels[pixelOffset + 1];
                    var pixelB = pixels[pixelOffset + 2];

                    //var rChannelIndex = channelDataIndex;
                    //var gChannelIndex = channelDataIndex + channelLength;
                    //var bChannelIndex = channelDataIndex + (channelLength * 2);
                    var rChannelIndex = channelDataIndex + (channelLength * 2);
                    var gChannelIndex = channelDataIndex + channelLength;
                    var bChannelIndex = channelDataIndex;

                    //channelData[rChannelIndex] = (pixelR / 255f - 0.485f) / 0.229f;
                    //channelData[gChannelIndex] = (pixelG / 255f - 0.456f) / 0.224f;
                    //channelData[bChannelIndex] = (pixelB / 255f - 0.406f) / 0.225f;
                    channelData[rChannelIndex] = (pixelR / 255f - 0.5f) / 0.5f;
                    channelData[gChannelIndex] = (pixelG / 255f - 0.5f) / 0.5f;
                    channelData[bChannelIndex] = (pixelB / 255f - 0.5f) / 0.5f;

                    channelDataIndex++;
                }
            }


            var input = new DenseTensor<float>(channelData, new[] { 1, 3, 112, 112 });


            using var results = _session.Run(new List<NamedOnnxValue> { NamedOnnxValue.CreateFromTensor(ModelInputName, input) });


            var outputRaw = results.FirstOrDefault(i => i.Name == ModelOutputName);

            if (outputRaw == null)
                return [];


            var emb = outputRaw.AsTensor<float>().ToList();
            var norm = NormDirect(emb);

            //float[] source_representation = { 1.0f, 2.0f, 3.0f };
            //float[] test_representation = { 4.0f, 5.0f, 6.0f };
            for (int i = 0; i < emb.Count; i++)
            {
                emb[i] /= norm;
            }
            // Calculate cosine distance
            //float distance = FindCosineDistance(source_representation, test_representation);
            return emb;

            // Generate a large list of floats for testing
            //List<float> list = new List<float>();
            //Random rand = new Random();
            //for (int i = 0; i < 1000000; i++)
            //{
            //    list.Add((float)rand.NextDouble());
            //}

            //// Measure execution time for calculating norm directly on List<float>
            //Stopwatch stopwatch1 = Stopwatch.StartNew();
            //float norm1 = NormDirect(list);
            //stopwatch1.Stop();

            //Console.WriteLine($"Execution time for calculating norm directly on List<float>: {stopwatch1.ElapsedMilliseconds} ms");

            //// Measure execution time for converting to Vector<float> and using built-in function
            //Stopwatch stopwatch2 = Stopwatch.StartNew();
            //float norm2 = NormWithVector(list);
            //stopwatch2.Stop();

            //Console.WriteLine($"Execution time for converting to Vector<float> and using built-in function: {stopwatch2.ElapsedMilliseconds} ms");

            //// Verify that the results are the same
            //Console.WriteLine($"Norm calculated directly on List<float>: {norm1}");
            //Console.WriteLine($"Norm calculated with Vector<float>: {norm2}");

        }

        public float FindCosineDistance(List<float> source_representation, List<float> test_representation)
        {
            // Calculate dot product
            float dotProduct = 0.0f;
            for (int i = 0; i < source_representation.Count; i++)
            {
                dotProduct += source_representation[i] * test_representation[i];
            }

            // Calculate magnitude of source_representation
            float magSource = 0.0f;
            foreach (float element in source_representation)
            {
                magSource += element * element;
            }

            // Calculate magnitude of test_representation
            float magTest = 0.0f;
            foreach (float element in test_representation)
            {
                magTest += element * element;
            }

            // Calculate distance
            float distance = dotProduct / (float)(Math.Sqrt(magSource) * Math.Sqrt(magTest));
            return distance;
        }

        public async Task<string> PostDataAsync(float[] emb)
        {
            using var client = new HttpClient();
            client.Timeout = TimeSpan.FromSeconds(30);

            // Set the bearer token
            client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjVhMmNjY2ExYmFlZDgzNjNmNDY5ZWI3In0.JcJHMpP_wdv61pjR4x_A8sKO6GGp9AaVhNGAkyELKTE");
            //double[] dbArray = {0.06866642087697983,
            //        -0.04483649879693985,
            //        0.02142319642007351,
            //        -0.10817766934633255,
            //        0.10292624682188034,
            //        0.0406075082719326,
            //        0.006182217970490456,
            //        0.015145550481975079,
            //        0.02174653857946396,
            //        -0.06614551693201065,
            //        -0.010595248080790043,
            //        0.047008633613586426,
            //        0.010356787592172623,
            //        -0.018654249608516693,
            //        -0.053539127111434937,
            //        0.07159648090600967,
            //        0.04910801723599434,
            //        -0.05486690253019333,
            //        0.006768005900084972,
            //        -0.01378670334815979,
            //        -0.039145924150943756,
            //        -0.010945281013846397,
            //        -0.028762541711330414,
            //        0.04839836806058884,
            //        0.016924777999520302,
            //        -0.007128777448087931,
            //        -0.0461965836584568,
            //        -0.028926024213433266,
            //        0.033098187297582626,
            //        0.004078875761479139,
            //        -0.01882070116698742,
            //        0.051496557891368866,
            //        0.029119526967406273,
            //        -0.019686976447701454,
            //        0.0072942632250487804,
            //        0.012184458784759045,
            //        0.047766558825969696,
            //        -0.020524047315120697,
            //        -0.008060161024332047,
            //        -0.008380657061934471,
            //        -0.03703990578651428,
            //        0.1040491908788681,
            //        -0.03311004117131233,
            //        0.018622905015945435,
            //        0.02187124453485012,
            //        -0.04749823734164238,
            //        -0.01779359020292759,
            //        0.09416308999061584,
            //        -0.040444549173116684,
            //        0.021587880328297615,
            //        -0.1170545294880867,
            //        -0.004058298654854298,
            //        -0.06335321068763733,
            //        -0.005168193485587835,
            //        -0.03896314278244972,
            //        0.0532776340842247,
            //        0.05541812628507614,
            //        0.026764540001749992,
            //        -0.004373116884380579,
            //        -0.035876788198947906,
            //        0.0005617411225102842,
            //        -0.04506680741906166,
            //        0.04887763783335686,
            //        -0.022792458534240723,
            //        -0.016046829521656036,
            //        -0.03637110814452171,
            //        0.032661765813827515,
            //        0.04799661412835121,
            //        -0.005213622003793716,
            //        0.010810306295752525,
            //        -0.0714300125837326,
            //        -0.07341268658638,
            //        0.07195378839969635,
            //        -0.03444172069430351,
            //        0.037835635244846344,
            //        -0.07895701378583908,
            //        0.03955066204071045,
            //        0.004494138993322849,
            //        -0.009013221599161625,
            //        0.020094845443964005,
            //        -0.007176924031227827,
            //        0.0565175898373127,
            //        -0.03253381699323654,
            //        -0.04141521826386452,
            //        0.02383454702794552,
            //        0.027756186202168465,
            //        -0.050056342035532,
            //        0.05195355415344238,
            //        0.08136966824531555,
            //        0.04385940730571747,
            //        -0.0035483078099787235,
            //        0.04822323098778725,
            //        -0.04547723010182381,
            //        0.009304328821599483,
            //        0.02420864626765251,
            //        -0.04054279625415802,
            //        0.06051941588521004,
            //        0.015214296989142895,
            //        0.08720962703227997,
            //        -0.045004893094301224,
            //        -0.026895994320511818,
            //        0.025885188952088356,
            //        0.04424811899662018,
            //        0.049482330679893494,
            //        -0.09335222095251083,
            //        -0.0022481177002191544,
            //        0.053728021681308746,
            //        0.016841860488057137,
            //        -0.02225358597934246,
            //        0.025853633880615234,
            //        0.016321202740073204,
            //        -0.011339869350194931,
            //        -0.028510190546512604,
            //        0.055438484996557236,
            //        0.001855082344263792,
            //        -0.013528317213058472,
            //        0.09197226166725159,
            //        -0.004386488813906908,
            //        0.03547655791044235,
            //        0.07954055070877075,
            //        0.045878902077674866,
            //        0.04365447536110878,
            //        0.038339611142873764,
            //        -0.0074835713021457195,
            //        0.038780223578214645,
            //        0.025156503543257713,
            //        -0.060275040566921234,
            //        0.001132190809585154,
            //        -0.019165556877851486,
            //        0.047969166189432144,
            //        -0.017432494089007378,
            //        0.04405099153518677,
            //        0.12979809939861298,
            //        -0.05734056234359741,
            //        -0.017001787200570107,
            //        -0.042081791907548904,
            //        0.011653563007712364,
            //        0.019972210749983788,
            //        0.05125948414206505,
            //        0.020872557535767555,
            //        0.010527451522648335,
            //        0.043281909078359604,
            //        0.04092217609286308,
            //        0.08266294002532959,
            //        -0.01804409734904766,
            //        0.027177177369594574,
            //        0.021550895646214485,
            //        0.00926461536437273,
            //        0.039832521229982376,
            //        0.0027953239623457193,
            //        0.03953924402594566,
            //        0.02270246297121048,
            //        0.016631031408905983,
            //        0.01909797079861164,
            //        0.02132631652057171,
            //        0.07172411680221558,
            //        0.013592256233096123,
            //        0.013383018784224987,
            //        -0.02490793913602829,
            //        0.03780893236398697,
            //        -0.030987126752734184,
            //        -0.04628422111272812,
            //        0.0920194759964943,
            //        -0.03817692771553993,
            //        0.011456579901278019,
            //        0.05204450711607933,
            //        -0.05974867194890976,
            //        -0.019691796973347664,
            //        -0.006164909806102514,
            //        0.026504848152399063,
            //        -0.026601044461131096,
            //        -0.054375506937503815,
            //        0.07493763417005539,
            //        0.005411744117736816,
            //        0.07429515570402145,
            //        -0.018801793456077576,
            //        -0.06563323736190796,
            //        0.004495688714087009,
            //        0.025687580928206444,
            //        0.08756066858768463,
            //        0.0026802534703165293,
            //        0.033068932592868805,
            //        0.023948485031723976,
            //        0.029058456420898438,
            //        0.06499139964580536,
            //        0.01653994992375374,
            //        0.04793374612927437,
            //        -0.06820083409547806,
            //        -0.11626475304365158,
            //        -0.04087785631418228,
            //        0.004141587298363447,
            //        0.0035403019282966852,
            //        -0.04196321591734886,
            //        0.0297849141061306,
            //        0.022643355652689934,
            //        -0.0012551300460472703,
            //        -0.007730333134531975,
            //        -0.03400399908423424,
            //        -0.03760388866066933,
            //        -0.06724191457033157,
            //        0.022327523678541183,
            //        0.0614287406206131,
            //        0.12392278015613556,
            //        0.04881494864821434,
            //        0.027361052110791206,
            //        -0.022242914885282516,
            //        -0.013292387127876282,
            //        0.025101570412516594,
            //        0.052694980055093765,
            //        0.020494718104600906,
            //        0.009002017788589,
            //        0.030971018597483635,
            //        -0.06075114384293556,
            //        0.03908292204141617,
            //        0.06996172666549683,
            //        0.024627815932035446,
            //        -0.06145276874303818,
            //        0.052989982068538666,
            //        0.008094970136880875,
            //        -0.06652510911226273,
            //        -0.050251204520463943,
            //        0.03039243072271347,
            //        0.03584989532828331,
            //        -0.05883835256099701,
            //        0.012594407424330711,
            //        0.021793123334646225,
            //        0.007551209069788456,
            //        0.0992097407579422,
            //        0.023913297802209854,
            //        -0.0061738197691738605,
            //        -0.005300790071487427,
            //        0.05181305110454559,
            //        -0.016858940944075584,
            //        -0.08027440309524536,
            //        0.024106847122311592,
            //        -0.036448121070861816,
            //        -0.018006490543484688,
            //        0.0031828300561755896,
            //        0.0029023499228060246,
            //        -0.0590195395052433,
            //        -0.04523240774869919,
            //        0.05126097425818443,
            //        -0.03391712158918381,
            //        0.0715901330113411,
            //        0.049913693219423294,
            //        -0.12124428898096085,
            //        0.015704436227679253,
            //        -0.02565612457692623,
            //        -0.0075087533332407475,
            //        0.014876889996230602,
            //        -0.0374222993850708,
            //        -0.11806739121675491,
            //        -0.024431437253952026,
            //        0.05862034857273102,
            //        -0.023599008098244667,
            //        -0.028113344684243202,
            //        0.02807047963142395,
            //        -0.013195939362049103,
            //        -0.038467422127723694,
            //        0.0021033654920756817,
            //        0.005167799536138773,
            //        -0.01266743429005146,
            //        -0.0202762670814991,
            //        -0.07081472128629684,
            //        0.0015309094451367855,
            //        0.034309688955545425,
            //        -0.044579993933439255,
            //        0.03967707231640816,
            //        0.021619511768221855,
            //        -0.018084239214658737,
            //        0.016131890937685966,
            //        0.05331231653690338,
            //        0.06976191699504852,
            //        -0.01406694296747446,
            //        -0.001303398865275085,
            //        0.008714365772902966,
            //        -0.0005690068355761468,
            //        0.057226117700338364,
            //        -0.02605542168021202,
            //        0.05349387973546982,
            //        -0.004892327357083559,
            //        0.023514797911047935,
            //        0.06511429697275162,
            //        -0.027324095368385315,
            //        -0.03050508163869381,
            //        -0.0023279646411538124,
            //        0.03013709746301174,
            //        0.028587954118847847,
            //        -0.044495418667793274,
            //        -0.0054174005053937435,
            //        -0.052401792258024216,
            //        0.012160257436335087,
            //        -0.05918651074171066,
            //        0.08710774779319763,
            //        -0.004989775829017162,
            //        -0.07401662319898605,
            //        0.014136933721601963,
            //        0.007216388825327158,
            //        0.10750556737184525,
            //        0.036851562559604645,
            //        0.03199116885662079,
            //        -0.024599814787507057,
            //        -0.010277356952428818,
            //        -0.02525675855576992,
            //        0.01075658481568098,
            //        0.0761822983622551,
            //        0.015176529064774513,
            //        -0.007710790727287531,
            //        -0.003956294618546963,
            //        -0.03014982119202614,
            //        0.00974494218826294,
            //        0.007934460416436195,
            //        -0.006784839555621147,
            //        0.014848469756543636,
            //        0.03438921272754669,
            //        0.037167854607105255,
            //        4.1446004615863785e-05,
            //        0.005461850203573704,
            //        0.0114537812769413,
            //        0.06750217080116272,
            //        0.09241191297769547,
            //        -0.08477392792701721,
            //        -0.01350781787186861,
            //        0.05698529630899429,
            //        0.018826153129339218,
            //        0.04251354560256004,
            //        -0.020235471427440643,
            //        -0.019336603581905365,
            //        -0.04665861278772354,
            //        -0.022330008447170258,
            //        -0.024948736652731895,
            //        -0.03721354156732559,
            //        -0.03260499984025955,
            //        -0.01596442610025406,
            //        -0.04210200160741806,
            //        0.07464475184679031,
            //        -0.00504010496661067,
            //        0.03799162060022354,
            //        0.03676596283912659,
            //        0.024930216372013092,
            //        0.0598515160381794,
            //        -0.030965527519583702,
            //        -0.049790460616350174,
            //        0.048783618956804276,
            //        0.0386301688849926,
            //        -0.006954365875571966,
            //        0.07249516993761063,
            //        0.03535518795251846,
            //        -0.08670595288276672,
            //        -0.0562782809138298,
            //        -0.01950828731060028,
            //        -0.02378862351179123,
            //        -0.05225307494401932,
            //        -0.04507095739245415,
            //        -0.016639919951558113,
            //        0.005601066630333662,
            //        -0.06750329583883286,
            //        -6.440351717174053e-05,
            //        0.007489632349461317,
            //        -0.01978892832994461,
            //        -0.05622999370098114,
            //        -0.02042875438928604,
            //        0.12352963536977768,
            //        -0.008515136316418648,
            //        -0.06061619892716408,
            //        0.028648240491747856,
            //        0.06796646118164062,
            //        0.042401280254125595,
            //        0.053160034120082855,
            //        0.04102696478366852,
            //        -0.02233768068253994,
            //        -0.0010547542478889227,
            //        -0.04120993614196777,
            //        -0.09212297201156616,
            //        0.0501195527613163,
            //        0.06494398415088654,
            //        0.009256964549422264,
            //        0.026002459228038788,
            //        -0.08096788823604584,
            //        0.12267358601093292,
            //        0.006019627209752798,
            //        0.013356615789234638,
            //        -0.019223731011152267,
            //        -0.04738866537809372,
            //        -0.009761199355125427,
            //        0.024420734494924545,
            //        0.007665701676160097,
            //        -0.10305530577898026,
            //        0.025477923452854156,
            //        0.05300123617053032,
            //        0.03540759161114693,
            //        -0.027559012174606323,
            //        0.02339288219809532,
            //        0.014823440462350845,
            //        -0.03658556938171387,
            //        -0.018135009333491325,
            //        -0.08295024186372757,
            //        0.001960441004484892,
            //        -0.027548056095838547,
            //        -0.01244736835360527,
            //        -0.038236334919929504,
            //        0.023385673761367798,
            //        0.015404500998556614,
            //        0.007869702763855457,
            //        0.0558493472635746,
            //        -0.045275941491127014,
            //        -0.004614640958607197,
            //        0.12569370865821838,
            //        0.05057615041732788,
            //        -0.08825802057981491,
            //        0.02096385881304741,
            //        0.003854387439787388,
            //        -0.024677028879523277,
            //        0.00915402453392744,
            //        -0.034168791025877,
            //        0.012125193141400814,
            //        0.015232671983540058,
            //        0.02055317349731922,
            //        -0.005602983292192221,
            //        0.08246210962533951,
            //        0.044380106031894684,
            //        0.04007019102573395,
            //        -0.005288009066134691,
            //        0.05349064618349075,
            //        0.011481518857181072,
            //        -0.006149179767817259,
            //        0.03065650537610054,
            //        0.04071434214711189,
            //        0.02535426616668701,
            //        0.01607765071094036,
            //        -0.0031702250707894564,
            //        -0.007936596870422363,
            //        0.00087606260785833,
            //        0.02591678872704506,
            //        -0.05404364690184593,
            //        0.07844944298267365,
            //        0.0008292896673083305,
            //        -0.07306858897209167,
            //        0.05620591342449188,
            //        -0.0005738221807405353,
            //        -0.02139640972018242,
            //        -0.11781994253396988,
            //        -0.06761913746595383,
            //        0.037443485110998154,
            //        0.025584334507584572,
            //        0.004758294206112623,
            //        0.010290641337633133,
            //        -0.01724698394536972,
            //        0.03677581250667572,
            //        -0.022186245769262314,
            //        -0.08288687467575073,
            //        0.01745566353201866,
            //        0.058194682002067566,
            //        0.011531810276210308,
            //        -0.0768793597817421,
            //        -0.055309079587459564,
            //        0.031246190890669823,
            //        -0.04927718639373779,
            //        0.06862945109605789,
            //        -0.026588421314954758,
            //        -0.0021981236059218645,
            //        0.061210256069898605,
            //        0.015308515168726444,
            //        0.035877425223588943,
            //        -0.0001983740512514487,
            //        -0.10126766562461853,
            //        0.016768911853432655,
            //        -0.028957679867744446,
            //        0.035374715924263,
            //        -0.033525075763463974,
            //        0.004799719899892807,
            //        -0.003422554349526763,
            //        0.10187915712594986,
            //        -0.019735893234610558,
            //        -0.034543342888355255,
            //        -0.02605540305376053,
            //        0.03635081276297569,
            //        0.02304050698876381,
            //        -0.06741371005773544,
            //        0.0012971214018762112,
            //        -0.032717034220695496,
            //        0.02730906940996647,
            //        -0.002495803637430072,
            //        -0.054788704961538315,
            //        -0.01783100888133049,
            //        0.0011461223475635052,
            //        0.03116328828036785,
            //        0.029323570430278778,
            //        -0.039288923144340515,
            //        -0.023163260892033577,
            //        -0.03883161023259163,
            //        0.0301316250115633,
            //        0.0013697028625756502,
            //        0.013990458101034164,
            //        0.013552272692322731,
            //        -0.013618025928735733,
            //        0.005879114847630262,
            //        0.010914869606494904,
            //        0.011851956136524677,
            //        -0.014245965518057346,
            //        -0.015031442977488041,
            //        0.043021999299526215,
            //        -0.025609053671360016,
            //        -0.09961003065109253,
            //        0.023102642968297005,
            //        0.0034639667719602585,
            //        0.05820337310433388,
            //        0.011169861070811749,
            //        -0.0009181005298160017,
            //        -0.0012298229848966002,
            //        -0.0313338041305542,
            //        -0.08156432211399078 };
            // Create the payload
            var payload = new
            {
                staff_code = "ABCABCD",
                embedding = emb,
                fas_flag = true,
                report_flag = true,
            };

            // Convert the payload to JSON and encode it
            var payloadJson = JsonConvert.SerializeObject(payload);
            var content = new StringContent(payloadJson, Encoding.UTF8, "application/json");

            // Send the POST request
            var response = await client.PostAsync("https://5045-171-244-194-10.ngrok-free.app/api/v1/staffs/search", content);

            // Ensure the request was successful
            //if (response.IsSuccessStatusCode)
            //{
                // Read the response content
            var responseContent = await response.Content.ReadAsStringAsync();

            return responseContent;
            //// Log the response content
            //Console.WriteLine("ket qua dau raaaaaaaaaaaaaaaaaaaaaaaaaaaa:");
            //System.Diagnostics.Debug.WriteLine(responseContent);
            //Console.WriteLine("ket qua dau raaaaaaaaaaaaaaaaaaaaaaaaaaaa:");
            ////}
        }

    }
}
